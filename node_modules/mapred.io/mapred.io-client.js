(function (exports, global) {

	var log = function(data) {
		console && console.log(data);
	}, callbacks = ['submit', 'message', 'result', 'join', 'leave', 'status'];
	function MapredClient(socket, opt)
	{
		this.gctime = 1000;
		this.socket = socket;
		this.opt = {};
		for (var i in callbacks) this.opt[callbacks[i]+'Callback'] = opt && opt[callbacks[i]+'Callback'] || log;
		this.init();
		this.onMap();
		this.onReduce();
		this.onResult();
	}

	MapredClient.prototype.init = function()
	{
		var $this = this;
		$this.socket.on('ready', function(data){
			$this.gc = setInterval(function(){ $this.socket.emit('task', {});}, $this.gctime);
		});
		for (var i in callbacks) ('result' != callbacks[i]) && $this.socket.on(callbacks[i], this.opt[callbacks[i]+'Callback']);
	}
	MapredClient.prototype.log = function(data)
	{
		console && console.log(data);
	}
	MapredClient.prototype.onMap = function()
	{
		var $this = this;
		this.socket.on('map', function (data) {
			clearInterval($this.gc);
		  try {
				eval('var map = ' + data.map + ';');
				var intermediate = [], groups = null;
				
				data.datas.forEach(function(elem, index){
					var key = elem[0], value = elem[1];
					intermediate = intermediate.concat(map(key, value));
				});
				intermediate.sort();
				
				groups = intermediate.reduce(function(res, current){
					var group = res[current[0]] || [];
					group.push(current[1]);
					res[current[0]] = group;
					return res; 
				}, {});
				delete data['datas'];
				data.groups = groups;
				$this.socket.emit('flod', data);
				$this.log("complated task: " + data.id)
				$this.gc = setInterval(function(data){ $this.socket.emit('task', {});},  $this.gctime);
			} catch(err) {
				$this.log("Error name: " + err.name + "Error message: " + err.message)
			}

		});
	};
	MapredClient.prototype.onReduce = function()
	{
		
		var $this = this;
		$this.socket.on('reduce', function (data) {
			clearInterval($this.gc);
			try{
				eval('var reduce = ' + data.reduce + ';');
				var groups = data.datas;
				
				for(var k in groups){
					groups[k] = reduce(k, groups[k]);
				}
				data.groups = groups;
				$this.socket.emit('result', data);
				$this.log("complated task: " + data.id)
				$this.gc = setInterval(function(data){ $this.socket.emit('task', {});},  $this.gctime);
			} catch(err) {
				$this.log("Error name: " + err.name + "Error message: " + err.message)
			}
		});
	};
	MapredClient.prototype.onResult = function()
	{
		var $this = this;
		$this.socket.on('result', function(data){
			$this.gc = setInterval(function(data){ $this.socket.emit('task', {});},  $this.gctime);
			var fn = $this.opt.resultCallback;
			fn && fn(data);
		})
	};
	MapredClient.prototype.submit = function(conf)
	{
		this.socket.emit('job',conf);
	};
	MapredClient.prototype.status = function()
	{
		this.socket.emit('status',{});
	};
	
	exports.MapredClient = MapredClient;
})('object' === typeof module ? module.exports : this, this);